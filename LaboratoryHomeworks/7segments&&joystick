const int pinX = A0; // Analog input
const int pinY = A1; // Analog input
const int pinSW = 10; 


int valueX = 0;
int valueY = 0;
int valueSW = 0;

const int pinA = 12;
const int pinB = 8;
const int pinC = 5;
const int pinD = 3;
const int pinE = 2;
const int pinF = 11;
const int pinG = 6;
const int pinDP = 4;
const int pinD1 = 7;
const int pinD2 = 9;
const int pinD3 = A2;
const int pinD4 = 13;

int state = 1;
int number = 5;

bool joyMove = false; // to move slower
int minTreshold = 400; // min value of the default joystick state
int maxTreshold = 600; // max value of the default joystick state

const int segSize = 8;
const int noOfDisplays = 4;
const int noOfDigits = 10;
int dpState = LOW;
int segments[segSize] = {pinA, pinB, pinC, pinD, pinE, pinF, pinG, pinDP};
int digits[noOfDisplays] = {pinD1, pinD2, pinD3, pinD4};
int currentDigitValues[noOfDisplays] = {0, 0, 0, 0};


int currentNumber = 0;
unsigned long delayCounting = 50;  // incrementing interval
unsigned long lastIncreasing = 0;

int currentDigit = 0;
int flushInterval = 1;
int lastFlush = 0;
int selectedDigit = noOfDisplays;
int blinking = noOfDisplays - 1;
int bState = true;
int bInterval = 499 + flushInterval;
int bLast = 0;
int deb = 0;
bool pushValue;
bool lastPushValue;
int debPush = 10;


const int MatrixOfDigits[11][9] = {
  {1, 1, 1, 1, 1, 1, 0}, // 0
  {0, 1, 1, 0, 0, 0, 0}, // 1
  {1, 1, 0, 1, 1, 0, 1}, // 2
  {1, 1, 1, 1, 0, 0, 1}, // 3
  {0, 1, 1, 0, 0, 1, 1}, // 4
  {1, 0, 1, 1, 0, 1, 1}, // 5
  {1, 0, 1, 1, 1, 1, 1}, // 6
  {1, 1, 1, 0, 0, 0, 0}, // 7
  {1, 1, 1, 1, 1, 1, 1}, // 8
  {1, 1, 1, 1, 0, 1, 1}  // 9
};

const int defaultX = 511; // customizabil in functie de cat afiseaza in Serial Joystickul
const int defaultY = 514;


void displayNumber(int digit, int state){
  for (int i = 0; i < segSize - 1; i++ )
    digitalWrite ( segments[i], MatrixOfDigits[digit][i]);
  digitalWrite ( segments[segSize - 1], state );
}


// activate the display no. received as param
void showDigit(int num) {
  for (int i = 0; i < noOfDisplays; i++) 
    digitalWrite(digits[i], HIGH);
  
  digitalWrite(digits[num], LOW);
}


void displayDigit(int num, byte digit, byte decimalPoint) {
  showDigit(num);
  for (int i = 0; i < segSize - 1; i++) {
    digitalWrite(segments[i], MatrixOfDigits[digit][i]);
  }
  digitalWrite(segments[segSize - 1], decimalPoint);
}

     
void clearDigit(int num) {
  showDigit(num);
  for (int i = 0; i < segSize; ++i) {
    digitalWrite(segments[i], LOW);
  }
}




void setup() {
  // put your setup code here, to run once:
  pinMode (pinSW, INPUT_PULLUP);
  Serial.begin ( 9600 );
  for (int i = 0; i < segSize - 1; i++)
    pinMode(segments[i], OUTPUT);  
 
  for (int i = 0; i < noOfDisplays; i++)
    pinMode(digits[i], OUTPUT);  
  
  Serial.begin(9600);
}

void loop() {
  // put your main code here, to run repeatedly:
 
//  
////  valueX = analogRead ( pinX );  
////  valueY = analogRead ( pinY );  
////  valueSW = digitalRead ( pinSW );  
////  digit = 0;
//// 
////
////  Serial.print ( "X = " );
////  Serial.print ( valueX );
////  Serial.print ( "  Y = " );
////  Serial.print ( valueY );
////  Serial.print ( "  SW = " );
////  Serial.print ( valueSW );
////  //Serial.println ( valueSW );
////  delay ( 100 );

  if (selectedDigit == noOfDisplays ){
    valueX = analogRead ( pinX );
    if ( valueX < minTreshold && !joyMove ){
      if (blinking > 0 )
        blinking --;
       else
        blinking = noOfDisplays - 1;
      bState = true;
      bLast = millis();
      joyMove = true;
    }

    if ( valueX > maxTreshold && !joyMove ){
      if( blinking < noOfDisplays - 1 )
        blinking ++;
       else 
        blinking = 0;
      bState = true;
      bLast = millis();
      joyMove = true;
    }

    if ( valueX >= minTreshold && valueX <= maxTreshold )
      joyMove = false;
      if (millis() - bLast >= bInterval ){
        bLast = millis();
        bState = !bState;
    }

    if (millis () - lastFlush >= flushInterval ){
      if( currentDigit == blinking && !bState )
        clearDigit (currentDigit);
       else 
        displayDigit (currentDigit, currentDigitValues[currentDigit], false );
       lastFlush = millis();
       if ( currentDigit == noOfDisplays - 1 )
        currentDigit = 0;
       else 
        currentDigit ++;
    }
  }
  else{
    
    valueY = analogRead ( pinY );
    if ( valueY < minTreshold && !joyMove ){
      if (currentDigitValues[selectedDigit] > 0)
        currentDigitValues[selectedDigit]--;
      else
        currentDigitValues[selectedDigit] = noOfDigits - 1;
      joyMove = true;
    }

    if ( valueY > minTreshold && !joyMove ){
      if (currentDigitValues[selectedDigit] < noOfDigits - 1)
        currentDigitValues[selectedDigit]++;
      else
        currentDigitValues[selectedDigit] = 0;
      joyMove = true;
    }

    if ( valueY >= minTreshold && valueY <= maxTreshold )
      joyMove = false;
    if (millis() - lastFlush >= flushInterval ){
        if (currentDigit == selectedDigit)
        displayDigit(currentDigit, currentDigitValues[currentDigit], true);
      else
        displayDigit(currentDigit, currentDigitValues[currentDigit], false);
      lastFlush = millis();
      if (currentDigit == noOfDisplays - 1)
        currentDigit = 0;
      else
        currentDigit++;
    }
  }


  if(millis() - deb >= debPush) {
    deb = millis();
    pushValue = !digitalRead(pinSW);
    if (pushValue != lastPushValue) {                            
      if (pushValue == true) {
        Serial.println(pinSW);
        if (selectedDigit == noOfDisplays) {                     
          selectedDigit = blinking;
          blinking = noOfDisplays;
        }
        else {                                                   
          blinking = selectedDigit;
          selectedDigit = noOfDisplays;
          bState = true;
          bLast = millis();
        }
      }
    lastPushValue = pushValue;
    }
  }

  
}
